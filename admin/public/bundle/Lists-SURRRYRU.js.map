{
  "version": 3,
  "sources": ["../../src/page/Admin/Content/Youtube/Lists.jsx"],
  "sourcesContent": ["import lozad from \"lozad\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { Card, Col, Dropdown, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Each } from \"~/Each\";\nimport * as h from \"~/Helpers\";\nimport { setModule } from \"~/redux\";\nimport YoutubeEmbed from \"~/YoutubeEmbed\";\n\nconst Lists = ({ totalData, listContent, setListContent, page, setPage }) => {\n   const { module } = useSelector((e) => e.redux);\n   const observerTarget = useRef(null);\n   const dispatch = useDispatch();\n\n   // bool\n   const [bottomOfPage, setBottomOfPage] = useState(false);\n\n   const getContent = (page) => {\n      const formData = { page };\n\n      const fetch = h.post(`/getdata`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setListContent((prev) => prev.concat(data.listContent));\n      });\n      fetch.finally(() => {\n         setBottomOfPage(false);\n         setPage((prev) => prev + 1);\n      });\n   };\n\n   useLayoutEffect(() => {\n      h.arrLength(listContent) &&\n         lozad(\".lozad\", {\n            enableAutoReload: true,\n         }).observe();\n      return () => {};\n   }, [listContent]);\n\n   useLayoutEffect(() => {\n      const observer = new IntersectionObserver(\n         (entries) => {\n            if (entries[0].isIntersecting) {\n               setBottomOfPage(true);\n            }\n         },\n         { threshold: 1 }\n      );\n\n      if (observerTarget.current) {\n         observer.observe(observerTarget.current);\n      }\n      return () => {\n         if (observerTarget.current) {\n            observer.unobserve(observerTarget.current);\n         }\n      };\n   }, [observerTarget, listContent]);\n\n   useLayoutEffect(() => {\n      if (bottomOfPage && totalData > listContent.length) getContent(page + 1);\n      return () => setBottomOfPage(false);\n   }, [bottomOfPage, page, totalData, listContent]);\n\n   const removeItemById = (arr, id) => {\n      return arr.filter((item) => h.toInt(h.parse(\"id\", item)) !== id);\n   };\n\n   const handleHapus = (row) => {\n      h.confirmDelete({\n         msg: `Apakah anda yakin ingin menghapus ${h.parse(\"origname\", row)}`,\n         url: \"/hapus\",\n         id: h.parse(\"id\", row),\n         custom: {\n            filename: h.parse(\"filename\", row),\n         },\n      }).then((res) => {\n         const { data } = res;\n         h.notification(data.status, data.msg_response);\n         if (!data.status) {\n            return;\n         }\n         const newData = removeItemById(listContent, h.toInt(h.parse(\"id\", row)));\n         setListContent(newData);\n         dispatch(setModule({ ...module, totalListContent: newData.length }));\n         totalData = newData.length;\n      });\n   };\n\n   const handleEdit = (row) => {\n      dispatch(setModule({ ...module, openForms: true, pageType: \"update\", detailContent: row }));\n   };\n\n   const getYoutubeVideoId = (url) => {\n      const regExp = /^.*(?:youtu.be\\/|v\\/|e\\/|u\\/\\w+\\/|embed\\/|v=)([^#\\&\\?]{11}).*/;\n      const match = url.match(regExp);\n      return match?.[1] ? match[1] : null;\n   };\n\n   return (\n      <Row>\n         <Each\n            of={listContent}\n            render={(row, index) => (\n               <Col md={4} className={index > 2 ? \"mt-6\" : \"\"}>\n                  <Card className=\"card-bordered shadow-sm\">\n                     <Card.Header>\n                        <OverlayTrigger overlay={<Tooltip>{h.parse(\"nama\", row)}</Tooltip>}>\n                           <h3 className=\"card-title\">{h.parse(\"nama\", row)}</h3>\n                        </OverlayTrigger>\n                        <div className=\"card-toolbar\">\n                           <Dropdown>\n                              <Dropdown.Toggle variant=\"light\" className=\"btn btn-sm\">\n                                 Aksi\n                              </Dropdown.Toggle>\n                              <Dropdown.Menu>\n                                 <Dropdown.Item onClick={() => handleEdit(row)}>Edit</Dropdown.Item>\n                                 <Dropdown.Item onClick={() => handleHapus(row)}>Hapus</Dropdown.Item>\n                              </Dropdown.Menu>\n                           </Dropdown>\n                        </div>\n                     </Card.Header>\n                     <Card.Body className=\"text-center px-4\">\n                        <YoutubeEmbed embedId={getYoutubeVideoId(h.parse(\"link\", row))} />\n                     </Card.Body>\n                  </Card>\n               </Col>\n            )}\n         />\n         <div ref={observerTarget} />\n      </Row>\n   );\n};\nexport default Lists;\n"],
  "mappings": "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",
  "names": ["import_lozad", "import_react", "Lists", "totalData", "listContent", "setListContent", "page", "setPage", "module", "useSelector", "e", "observerTarget", "dispatch", "useDispatch", "bottomOfPage", "setBottomOfPage", "getContent", "fetch", "post", "res", "data", "parse", "notification", "prev", "arrLength", "lozad", "observer", "entries", "removeItemById", "arr", "id", "item", "toInt", "handleHapus", "row", "confirmDelete", "newData", "setModule", "handleEdit", "getYoutubeVideoId", "url", "regExp", "match", "React", "Row_default", "Each", "index", "Col_default", "Card_default", "OverlayTrigger_default", "Tooltip_default", "Dropdown_default", "YoutubeEmbed_default", "Lists_default"]
}
