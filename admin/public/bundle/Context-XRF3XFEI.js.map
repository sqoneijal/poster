{
  "version": 3,
  "sources": ["../../src/page/Admin/Content/Images/Context.jsx"],
  "sourcesContent": ["import React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport { Bars } from \"react-loader-spinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as h from \"~/Helpers\";\nimport { position, filter as setFilter, setModule } from \"~/redux\";\n\nconst Lists = React.lazy(() => import(\"./Lists\"));\nconst Filter = React.lazy(() => import(\"./Filter\"));\n\nlet totalData = 0;\n\nconst Context = ({ setToolbarFilter }) => {\n   const { module, init, filter } = useSelector((e) => e.redux);\n   const dispatch = useDispatch();\n   const inputFile = useRef(null);\n\n   // bool\n   const [isSubmit, setIsSubmit] = useState(false);\n\n   // array\n   const [listContent, setListContent] = useState([]);\n\n   const getContent = (filter) => {\n      const formData = {};\n      Object.keys(filter).forEach((key) => (formData[key] = filter[key]));\n\n      const fetch = h.post(`/getdata`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         dispatch(setModule({ ...module, showToolbarFilter: true }));\n         dispatch(setFilter(formData));\n         if (formData.source === \"filter\") {\n            setListContent(data.listContent);\n         } else {\n            setListContent((prev) => prev.concat(data.listContent));\n         }\n         totalData = data.totalListContent;\n      });\n   };\n\n   useLayoutEffect(() => {\n      dispatch(position([\"Content\", document.title]));\n      getContent({ page: 0 });\n      return () => {};\n   }, []);\n\n   useLayoutEffect(() => {\n      setToolbarFilter(\n         h.buttons(`Upload ${document.title}`, isSubmit, {\n            onClick: () => inputFile.current.click(),\n         })\n      );\n      return () => setIsSubmit(false);\n   }, [isSubmit]);\n\n   const handleUpload = (file) => {\n      const formData = { user_modified: h.parse(\"username\", init), file };\n\n      setIsSubmit(true);\n      const fetch = h.post(`/submit`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         h.notification(data.status, data.msg_response);\n\n         if (!data.status) return;\n         setListContent((prev) => prev.concat(data.content));\n         totalData++;\n      });\n      fetch.finally(() => {\n         setIsSubmit(false);\n      });\n   };\n\n   const props = { getContent, totalData, listContent, setListContent };\n\n   return (\n      h.objLength(filter) && (\n         <Row>\n            <input\n               multiple\n               type=\"file\"\n               className=\"d-none\"\n               ref={inputFile}\n               onChange={(e) => {\n                  if (h.arrLength(e.target.files)) {\n                     handleUpload(e.target.files[0]);\n                  }\n               }}\n            />\n            <React.Suspense\n               fallback={\n                  <Bars\n                     visible={true}\n                     color=\"#4fa94d\"\n                     radius=\"9\"\n                     wrapperStyle={{\n                        alignItems: \"center\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                     }}\n                     wrapperClass=\"page-loader flex-column bg-dark bg-opacity-25\"\n                  />\n               }>\n               <Filter {...props} />\n               <Lists {...props} />\n            </React.Suspense>\n         </Row>\n      )\n   );\n};\nexport default Context;\n"],
  "mappings": "mYAAA,IAAAA,EAAyD,OAOzD,IAAMC,EAAQ,EAAAC,QAAM,KAAK,IAAM,OAAO,qBAAS,CAAC,EAC1CC,EAAS,EAAAD,QAAM,KAAK,IAAM,OAAO,sBAAU,CAAC,EAE9CE,EAAY,EAEVC,EAAU,CAAC,CAAE,iBAAAC,CAAiB,IAAM,CACvC,GAAM,CAAE,OAAAC,EAAQ,KAAAC,EAAM,OAAAC,CAAO,EAAIC,EAAaC,GAAMA,EAAE,KAAK,EACrDC,EAAWC,EAAY,EACvBC,KAAY,UAAO,IAAI,EAGvB,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAK,EAGxC,CAACC,EAAaC,CAAc,KAAI,YAAS,CAAC,CAAC,EAE3CC,EAAcV,GAAW,CAC5B,IAAMW,EAAW,CAAC,EAClB,OAAO,KAAKX,CAAM,EAAE,QAASY,GAASD,EAASC,CAAG,EAAIZ,EAAOY,CAAG,CAAE,EAElDC,EAAK,WAAYF,CAAQ,EACnC,KAAMG,GAAQ,CACjB,GAAI,OAAOA,EAAQ,IAAa,OAEhC,GAAM,CAAE,KAAAC,CAAK,EAAID,EACjB,GAAI,OAAOC,EAAK,KAAS,KAAiBC,EAAM,OAAQD,CAAI,IAAM,IAAK,CAClEE,EAAa,GAASD,EAAM,UAAWD,CAAI,CAAC,EAC9C,MACH,CAEAZ,EAASe,EAAU,CAAE,GAAGpB,EAAQ,kBAAmB,EAAK,CAAC,CAAC,EAC1DK,EAASH,EAAUW,CAAQ,CAAC,EACxBA,EAAS,SAAW,SACrBF,EAAeM,EAAK,WAAW,EAE/BN,EAAgBU,GAASA,EAAK,OAAOJ,EAAK,WAAW,CAAC,EAEzDpB,EAAYoB,EAAK,gBACpB,CAAC,CACJ,KAEA,mBAAgB,KACbZ,EAASiB,EAAS,CAAC,UAAW,SAAS,KAAK,CAAC,CAAC,EAC9CV,EAAW,CAAE,KAAM,CAAE,CAAC,EACf,IAAM,CAAC,GACd,CAAC,CAAC,KAEL,mBAAgB,KACbb,EACKwB,EAAQ,UAAU,SAAS,KAAK,GAAIf,EAAU,CAC7C,QAAS,IAAMD,EAAU,QAAQ,MAAM,CAC1C,CAAC,CACJ,EACO,IAAME,EAAY,EAAK,GAC9B,CAACD,CAAQ,CAAC,EAEb,IAAMgB,EAAgBC,GAAS,CAC5B,IAAMZ,EAAW,CAAE,cAAiBK,EAAM,WAAYjB,CAAI,EAAG,KAAAwB,CAAK,EAElEhB,EAAY,EAAI,EAChB,IAAMiB,EAAUX,EAAK,UAAWF,CAAQ,EACxCa,EAAM,KAAMV,GAAQ,CACjB,GAAI,OAAOA,EAAQ,IAAa,OAEhC,GAAM,CAAE,KAAAC,CAAK,EAAID,EACjB,GAAI,OAAOC,EAAK,KAAS,KAAiBC,EAAM,OAAQD,CAAI,IAAM,IAAK,CAClEE,EAAa,GAASD,EAAM,UAAWD,CAAI,CAAC,EAC9C,MACH,CAEEE,EAAaF,EAAK,OAAQA,EAAK,YAAY,EAExCA,EAAK,SACVN,EAAgBU,GAASA,EAAK,OAAOJ,EAAK,OAAO,CAAC,EAClDpB,IACH,CAAC,EACD6B,EAAM,QAAQ,IAAM,CACjBjB,EAAY,EAAK,CACpB,CAAC,CACJ,EAEMkB,EAAQ,CAAE,WAAAf,EAAY,UAAAf,EAAW,YAAAa,EAAa,eAAAC,CAAe,EAEnE,OACKiB,EAAU1B,CAAM,GACf,EAAAP,QAAA,cAACkC,EAAA,KACE,EAAAlC,QAAA,cAAC,SACE,SAAQ,GACR,KAAK,OACL,UAAU,SACV,IAAKY,EACL,SAAWH,GAAM,CACR0B,EAAU1B,EAAE,OAAO,KAAK,GAC3BoB,EAAapB,EAAE,OAAO,MAAM,CAAC,CAAC,CAEpC,EACH,EACA,EAAAT,QAAA,cAAC,EAAAA,QAAM,SAAN,CACE,SACG,EAAAA,QAAA,cAACoC,EAAA,CACE,QAAS,GACT,MAAM,UACN,OAAO,IACP,aAAc,CACX,WAAY,SACZ,QAAS,OACT,eAAgB,QACnB,EACA,aAAa,gDAChB,GAEH,EAAApC,QAAA,cAACC,EAAA,CAAQ,GAAG+B,EAAO,EACnB,EAAAhC,QAAA,cAACD,EAAA,CAAO,GAAGiC,EAAO,CACrB,CACH,CAGT,EACOK,EAAQlC",
  "names": ["import_react", "Lists", "React", "Filter", "totalData", "Context", "setToolbarFilter", "module", "init", "filter", "useSelector", "e", "dispatch", "useDispatch", "inputFile", "isSubmit", "setIsSubmit", "listContent", "setListContent", "getContent", "formData", "key", "post", "res", "data", "parse", "notification", "setModule", "prev", "position", "buttons", "handleUpload", "file", "fetch", "props", "objLength", "Row_default", "arrLength", "$7dd1b251b360e95a$export$fbc7d6f7dd821b47", "Context_default"]
}
