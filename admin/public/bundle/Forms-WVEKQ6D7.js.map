{
  "version": 3,
  "sources": ["../../src/page/Admin/Content/Youtube/Forms.jsx"],
  "sourcesContent": ["import React, { useLayoutEffect, useState } from \"react\";\nimport { ButtonGroup, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as h from \"~/Helpers\";\nimport { setModule } from \"~/redux\";\n\nconst Forms = ({ listContent, setListContent, totalData }) => {\n   const { module, init } = useSelector((e) => e.redux);\n   const { openForms, pageType, detailContent } = module;\n   const dispatch = useDispatch();\n\n   // bool\n   const [isSubmit, setIsSubmit] = useState(false);\n\n   // object\n   const [errors, setErrors] = useState({});\n   const [input, setInput] = useState({});\n\n   useLayoutEffect(() => {\n      if (pageType === \"update\" && h.objLength(detailContent)) setInput({ ...detailContent });\n      return () => {};\n   }, [pageType, detailContent]);\n\n   const clearProps = () => {\n      setErrors({});\n      setInput({});\n   };\n\n   const handleClose = () => {\n      clearProps();\n      dispatch(setModule({ ...module, openForms: false, pageType: \"\", detailContent: {} }));\n   };\n\n   const submit = (e) => {\n      e.preventDefault();\n      const formData = { pageType, user_modified: h.parse(\"username\", init) };\n      Object.keys(input).forEach((key) => (formData[key] = input[key]));\n\n      setIsSubmit(true);\n      const fetch = h.post(`/submit`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setErrors(data.errors);\n         h.notification(data.status, data.msg_response);\n\n         if (!data.status) return;\n\n         clearProps();\n         dispatch(setModule({ ...module, openForms: false, pageType: \"\", detailContent: {} }));\n\n         if (pageType === \"insert\") {\n            setListContent((prev) => prev.concat(data));\n            totalData = totalData + 1;\n         } else {\n            const newData = [];\n            listContent.map((row) => {\n               if (h.toInt(h.parse(\"id\", row)) === h.toInt(formData.id)) {\n                  newData.push({ ...row, nama: h.parse(\"nama\", formData), link: h.parse(\"link\", formData) });\n               } else {\n                  newData.push(row);\n               }\n            });\n            setListContent(newData);\n         }\n      });\n      fetch.finally(() => {\n         setIsSubmit(false);\n      });\n   };\n\n   return (\n      <React.Fragment>\n         {openForms && <div className=\"drawer-overlay\" />}\n         <div className={`bg-white drawer drawer-start ${openForms ? \"drawer-on\" : \"\"}`} style={{ width: window.innerWidth / 2 }}>\n            <Card className=\"rounded-0 w-100\">\n               <Card.Header className=\"pe-5\">\n                  <div className=\"card-title\">\n                     <div className=\"d-flex justify-content-center flex-column me-3\">\n                        <span className=\"fs-4 fw-bold text-gray-900 text-hover-primary me-1 lh-1\">\n                           {h.pageType(pageType)} Link {document.title}\n                        </span>\n                     </div>\n                  </div>\n                  <div className=\"card-toolbar\">\n                     <button className=\"btn btn-sm btn-icon btn-active-light-primary\" onClick={handleClose}>\n                        <i className=\"ki-duotone ki-cross fs-2\">\n                           <span className=\"path1\" />\n                           <span className=\"path2\" />\n                        </i>\n                     </button>\n                  </div>\n               </Card.Header>\n               <Card.Body className=\"hover-scroll-overlay-y\">\n                  {h.form_text(\n                     `Nama`,\n                     `nama`,\n                     { onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })), value: h.parse(`nama`, input) },\n                     true,\n                     errors\n                  )}\n                  {h.form_text(\n                     `Link Youtube`,\n                     `link`,\n                     { onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })), value: h.parse(`link`, input) },\n                     true,\n                     errors\n                  )}\n               </Card.Body>\n               <Card.Footer className=\"text-end\">\n                  <ButtonGroup>\n                     {h.buttons(`Simpan Link ${document.title}`, isSubmit, {\n                        onClick: isSubmit ? null : submit,\n                     })}\n                     {h.buttons(`Batal`, false, {\n                        variant: \"danger\",\n                        onClick: () => handleClose(),\n                     })}\n                  </ButtonGroup>\n               </Card.Footer>\n            </Card>\n         </div>\n      </React.Fragment>\n   );\n};\nexport default Forms;\n"],
  "mappings": "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",
  "names": ["import_react", "Forms", "listContent", "setListContent", "totalData", "module", "init", "useSelector", "e", "openForms", "pageType", "detailContent", "dispatch", "useDispatch", "isSubmit", "setIsSubmit", "errors", "setErrors", "input", "setInput", "objLength", "clearProps", "handleClose", "setModule", "submit", "formData", "parse", "key", "fetch", "post", "res", "data", "notification", "prev", "newData", "row", "toInt", "React", "Card_default", "form_text", "ButtonGroup_default", "buttons", "Forms_default"]
}
