{
  "version": 3,
  "sources": ["../../src/page/Admin/Content/Video/Forms.jsx"],
  "sourcesContent": ["import React, { useLayoutEffect, useState } from \"react\";\nimport { ButtonGroup, Card, ProgressBar } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as h from \"~/Helpers\";\nimport { setModule } from \"~/redux\";\n\nconst Forms = ({ setListContent }) => {\n   const { module, init, filter } = useSelector((e) => e.redux);\n   const { openForms, pageType, detailContent } = module;\n   const dispatch = useDispatch();\n\n   // bool\n   const [isSubmit, setIsSubmit] = useState(false);\n\n   // object\n   const [input, setInput] = useState({});\n   const [errors, setErrors] = useState({});\n\n   // string\n   const [percentCompleted, setPercentCompleted] = useState(0);\n\n   useLayoutEffect(() => {\n      if (pageType === \"update\" && h.objLength(detailContent)) setInput({ ...detailContent });\n      return () => {};\n   }, [pageType, detailContent]);\n\n   const clearProps = () => {\n      setInput({});\n      setErrors({});\n   };\n\n   const handleClose = () => {\n      setPercentCompleted(0);\n      clearProps();\n      dispatch(setModule({ ...module, openForms: false, pageType: \"\", detailContent: {} }));\n   };\n\n   const submit = (e) => {\n      e.preventDefault();\n      const formData = { pageType, user_modified: h.parse(\"username\", init) };\n      Object.keys(input).forEach((key) => (formData[key] = input[key]));\n\n      const config = {\n         onUploadProgress(progressEvent) {\n            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            setPercentCompleted(percentCompleted);\n         },\n      };\n\n      setIsSubmit(true);\n      const fetch = h.post(`/submit`, formData, config);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setErrors(data.errors);\n         h.notification(data.status, data.msg_response);\n\n         if (!data.status) return;\n         setPercentCompleted(0);\n         clearProps();\n         dispatch(setModule({ ...module, openForms: false, pageType: \"\", detailContent: {} }));\n         setListContent((prev) => prev.concat(data.content));\n      });\n      fetch.finally(() => {\n         setIsSubmit(false);\n         setPercentCompleted(0);\n      });\n   };\n\n   return (\n      <React.Fragment>\n         {openForms && <div className=\"drawer-overlay\" />}\n         <div className={`bg-white drawer drawer-start ${openForms ? \"drawer-on\" : \"\"}`} style={{ width: window.innerWidth / 2 }}>\n            <Card className=\"rounded-0 w-100\">\n               <Card.Header className=\"pe-5\">\n                  <div className=\"card-title\">\n                     <div className=\"d-flex justify-content-center flex-column me-3\">\n                        <span className=\"fs-4 fw-bold text-gray-900 text-hover-primary me-1 lh-1\">\n                           {h.pageType(pageType)} {document.title}\n                        </span>\n                     </div>\n                  </div>\n                  <div className=\"card-toolbar\">\n                     <button className=\"btn btn-sm btn-icon btn-active-light-primary\" onClick={handleClose}>\n                        <i className=\"ki-duotone ki-cross fs-2\">\n                           <span className=\"path1\" />\n                           <span className=\"path2\" />\n                        </i>\n                     </button>\n                  </div>\n               </Card.Header>\n               <Card.Body className=\"hover-scroll-overlay-y\">\n                  {h.form_text(\n                     `Judul`,\n                     `judul`,\n                     { onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })), value: h.parse(`judul`, input) },\n                     true,\n                     errors\n                  )}\n                  {h.form_upload(\n                     `Video File`,\n                     `video_file`,\n                     {\n                        onChange: (e) => {\n                           const files = e.target.files;\n                           if (files.length > 0) setInput((prev) => ({ ...prev, video_file: files[0].name, file: files[0] }));\n                        },\n                     },\n                     true,\n                     errors\n                  )}\n                  {percentCompleted > 0 && <ProgressBar now={percentCompleted} animated label={`${percentCompleted}%`} />}\n               </Card.Body>\n               <Card.Footer className=\"text-end\">\n                  <ButtonGroup>\n                     {h.buttons(`Simpan ${document.title}`, isSubmit, {\n                        onClick: isSubmit ? null : submit,\n                     })}\n                     {h.buttons(`Batal`, false, {\n                        variant: \"danger\",\n                        onClick: () => handleClose(),\n                     })}\n                  </ButtonGroup>\n               </Card.Footer>\n            </Card>\n         </div>\n      </React.Fragment>\n   );\n};\nexport default Forms;\n"],
  "mappings": "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",
  "names": ["import_react", "Forms", "setListContent", "module", "init", "filter", "useSelector", "e", "openForms", "pageType", "detailContent", "dispatch", "useDispatch", "isSubmit", "setIsSubmit", "input", "setInput", "errors", "setErrors", "percentCompleted", "setPercentCompleted", "objLength", "clearProps", "handleClose", "setModule", "submit", "formData", "parse", "key", "config", "progressEvent", "fetch", "post", "res", "data", "notification", "prev", "React", "Card_default", "form_text", "form_upload", "files", "ProgressBar_default", "ButtonGroup_default", "buttons", "Forms_default"]
}
