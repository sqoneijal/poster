{
  "version": 3,
  "sources": ["../../src/page/Admin/Screen/Forms.jsx"],
  "sourcesContent": ["import React, { useLayoutEffect, useState } from \"react\";\nimport { ButtonGroup, Card, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as h from \"~/Helpers\";\nimport { setModule } from \"~/redux\";\n\nconst Forms = ({ daftarRotasi, daftarAnimasi }) => {\n   const { module, init, websocket } = useSelector((e) => e.redux);\n   const { openForms, pageType, detailContent } = module;\n   const dispatch = useDispatch();\n   const socket = new WebSocket(websocket);\n\n   // bool\n   const [isSubmit, setIsSubmit] = useState(false);\n\n   // object\n   const [input, setInput] = useState({});\n   const [errors, setErrors] = useState({});\n\n   useLayoutEffect(() => {\n      if (pageType === \"update\" && h.objLength(detailContent)) setInput({ ...detailContent, old_kode: h.parse(\"kode\", detailContent) });\n      return () => {};\n   }, [pageType, detailContent]);\n\n   const clearProps = () => {\n      setInput({});\n      setErrors({});\n   };\n\n   const handleClose = () => {\n      clearProps();\n      dispatch(setModule({ ...module, pageType: \"\", detailContent: {}, openForms: false }));\n   };\n\n   const submit = (e) => {\n      e.preventDefault();\n      const formData = { pageType, user_modified: h.parse(\"username\", init) };\n      Object.keys(input).forEach((key) => (formData[key] = input[key]));\n\n      setIsSubmit(true);\n      const fetch = h.post(`/submit`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setErrors(data.errors);\n         h.notification(data.status, data.msg_response);\n\n         if (!data.status) return;\n\n         clearProps();\n         dispatch(setModule({ ...module, pageType: \"\", detailContent: {}, openForms: false }));\n         h.dtReload();\n\n         socket.onopen = (e) => {\n            if (e.target.readyState) {\n               const socketdata = {\n                  screen: {\n                     reload: true,\n                     status: \"online\",\n                     screenCode: [h.parse(\"kode\", input)],\n                  },\n               };\n\n               socket.send(JSON.stringify(socketdata));\n            }\n         };\n      });\n      fetch.finally(() => {\n         setIsSubmit(false);\n      });\n   };\n\n   return (\n      <React.Fragment>\n         {openForms && <div className=\"drawer-overlay\" />}\n         <div className={`bg-white drawer drawer-start ${openForms ? \"drawer-on\" : \"\"}`} style={{ width: window.innerWidth / 2 }}>\n            <Card className=\"rounded-0 w-100\">\n               <Card.Header className=\"pe-5\">\n                  <div className=\"card-title\">\n                     <div className=\"d-flex justify-content-center flex-column me-3\">\n                        <span className=\"fs-4 fw-bold text-gray-900 text-hover-primary me-1 lh-1\">\n                           {h.pageType(pageType)} {document.title}\n                        </span>\n                     </div>\n                  </div>\n                  <div className=\"card-toolbar\">\n                     <button className=\"btn btn-sm btn-icon btn-active-light-primary\" onClick={handleClose}>\n                        <i className=\"ki-duotone ki-cross fs-2\">\n                           <span className=\"path1\" />\n                           <span className=\"path2\" />\n                        </i>\n                     </button>\n                  </div>\n               </Card.Header>\n               <Card.Body className=\"hover-scroll-overlay-y\">\n                  <Row>\n                     <Col md={3} sm={12}>\n                        {h.form_text(\n                           `Kode`,\n                           `kode`,\n                           { onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })), value: h.parse(`kode`, input) },\n                           true,\n                           errors\n                        )}\n                     </Col>\n                     <Col>\n                        {h.form_text(\n                           `Nama`,\n                           `nama`,\n                           { onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })), value: h.parse(`nama`, input) },\n                           true,\n                           errors\n                        )}\n                     </Col>\n                  </Row>\n                  <Row>\n                     <Col md={3} sm={12}>\n                        {h.form_select(\n                           `Rotasi Layar`,\n                           `screen_rotation`,\n                           {\n                              onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                              value: h.parse(`screen_rotation`, input),\n                           },\n                           daftarRotasi\n                        )}\n                     </Col>\n                     <Col md={5} sm={12}>\n                        {h.form_select(\n                           \"Animasi Layar\",\n                           \"screen_animation\",\n                           {\n                              onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                              value: h.parse(\"screen_animation\", input),\n                           },\n                           daftarAnimasi\n                        )}\n                     </Col>\n                  </Row>\n               </Card.Body>\n               <Card.Footer className=\"text-end\">\n                  <ButtonGroup>\n                     {h.buttons(`Simpan ${document.title}`, isSubmit, {\n                        onClick: isSubmit ? null : submit,\n                     })}\n                     {h.buttons(`Batal`, false, {\n                        variant: \"danger\",\n                        onClick: () => handleClose(),\n                     })}\n                  </ButtonGroup>\n               </Card.Footer>\n            </Card>\n         </div>\n      </React.Fragment>\n   );\n};\nexport default Forms;\n"],
  "mappings": "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",
  "names": ["import_react", "Forms", "daftarRotasi", "daftarAnimasi", "module", "init", "websocket", "useSelector", "e", "openForms", "pageType", "detailContent", "dispatch", "useDispatch", "socket", "isSubmit", "setIsSubmit", "input", "setInput", "errors", "setErrors", "objLength", "parse", "clearProps", "handleClose", "setModule", "submit", "formData", "key", "fetch", "post", "res", "data", "notification", "dtReload", "socketdata", "React", "Card_default", "Row_default", "Col_default", "form_text", "prev", "form_select", "ButtonGroup_default", "buttons", "Forms_default"]
}
